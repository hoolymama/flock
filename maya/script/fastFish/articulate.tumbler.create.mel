global  proc articulate.tumbler.addAttrs(string $particle) {

	string $atts[] = { 	
		"view:vectorArray",		
		"upVector:vectorArray",
		"deltaView:vectorArray",
		"bend:doubleArray",
		"deltaBend:doubleArray",
		"flapAmplitude:doubleArray",
		"flapOffset:doubleArray",
		"effort:doubleArray",
		"deltaArch:doubleArray",		
		"arch:doubleArray",
		"goalView:vectorArray",		
		"goalUp:vectorArray",	
		"phi:vectorArray",
		"omega:vectorArray",	
		"rotation:vectorArray"
	};

	attr.addAttrs( $particle,$atts);

}



proc articulate.tumbler.createCreationExpression(string $particle) {

	string $expr = (	"upVector = <<0,1,0>>;\n"+
		"vector $initView = sphrand(1.0);\n"+
		"view = unit(<< ($initView.x),0, ($initView.z)>>);\n"+
		"deltaView = <<0,0,0>>;\n"+
		"bend = 0;\n"+
		"deltaBend = 0;\n"+
		"flapAmplitude = 0;\n"+
		"flapOffset = 0;\n"+
		"effort = 0;\n"+
		"deltaArch = 0;\n"+
		"arch = 0;\n"+
		"phi = sphrand(3.1415927);\n"+
		"omega = <<0,0,0>>;\n"
		);
	dynamics.appendToDynExpression( $particle, $expr, " ARTICULATE & TUMBLER ", 0);

}

proc articulate.tumbler.createRuntimeBeforeExpression(string $particle) {
	string $expr = ( 
		"goalView = unit(velocity);\n"+
		"goalUp = unit(cross(cross(goalView , <<0,1,0>>) , goalView )) ;\n"
		);
	dynamics.appendToDynExpression( $particle, $expr, " ARTICULATE & TUMBLER ", 1);
}


proc articulate.tumbler.createRuntimeAfterExpression(string $particle,string $articulate,string $tumbler) {

	string $expr = (
		"effort = "+$articulate+".outEffortPP;\n"+
		"flapOffset += "+$articulate+".outFlapOffsetPP;\n"+
		"flapAmplitude =  "+$articulate+".outFlapAmplitudePP;\n"+
		"\n"+
		"//  differentiate bend\n"+
		"float $oldBend = bend;\n"+
		"bend = "+$articulate+".outBendPP;\n"+
		"deltaBend = bend - $oldBend;\n"+
		"\n"+
		"//  differentiate arch\n"+
		"float $oldArch = arch;\n"+
		"arch = "+$articulate+".outArchPP;\n"+
		"deltaArch = arch - $oldArch;\n"+
		"\n"+
		"phi = "+$tumbler+".outPhi;\n"+
		"omega  = "+$tumbler+".outOmega;\n"+
		"\n"+
		"vector $oldView = view;\n"+
		"view  = "+$tumbler+".outFront;\n"+
		"deltaView = view - $oldView;\n"+
		"upVector  = "+$tumbler+".outUp;\n"+
		"rotation = "+$tumbler+".outRotation;\n"
		);

	dynamics.appendToDynExpression( $particle, $expr, " ARTICULATE & TUMBLER ", 2);

}

proc articulate.tumbler.dynamicConnections(string $p,string $a,string $t) {
	// articulate
	string $connectionPairs[] ;
	
	$connectionPairs = {
		"inputForce[0]:thrustPP",
		"velocity:velocityPP",
		"upVector:upVectorPP",
		"deltaView:deltaViewPP",
		"view:viewPP",
		"deltaBend:deltaBendPP",
		"bend:bendPP",
		"deltaArch:deltaArchPP",
		"arch:archPP",
		"effort:lastEffortPP"
	};
	
	attr.connectPairs($p, $a, $connectionPairs);
	
	connectAttr -f "time1.o" ($a+".currentTime");

	// tumbler
	$connectionPairs = {
		"goalView:goalFrontVector",
		"goalUp:goalUpVector",
		"phi:phi",
		"omega:omega"
	};
	attr.connectPairs($p, $t, $connectionPairs);
	
	connectAttr -f "time1.o" ($t+".currentTime");


}


proc articulate.tumbler.configDefaults(string $articulate, string $tumbler) {

	setAttr -s 6 ($articulate+ ".blut[0:5]")  0 0 1 0.0787 0.68 1 	1 0.98 0 0 1 0.496 0.959 1 0.322 0.899 1;
	setAttr ($articulate+ ".bspr") 0.2;
	setAttr ($articulate+ ".cbnd") 0.35;
	setAttr -s 5 ($articulate+ ".alut[0:4]")  0 0.2 1 0.5 0.5 1 1 0.801 	0.649 0.64 1 0.34 0.34 1;
	setAttr ($articulate+ ".armg") 5;
	setAttr ($articulate+ ".aspr") 0.2;
	setAttr ($articulate+ ".car") 0.3;
	setAttr ($articulate+ ".thmx") 150;
	setAttr -s 4 ($articulate+ ".thlt[0:3]")  0 0 1 1 1 1 0.046 0.740 	1 0.22 0.92 1;
	setAttr ($articulate+ ".vlmx") 150;
	setAttr -s 4 ($articulate+ ".dglt[0:3]")  0.992 0.6 1 0.732 	0.319 1 0 0.059 1 0.39 0.14 1;
	setAttr ($articulate+ ".efsp") 1.5;
	setAttr ($articulate+ ".foml") 0.45;
	setAttr -s 4 ($articulate+ ".folt");
	setAttr ($articulate+ ".folt[0:1]") 0 0.039 1 1 0.479 	1;
	setAttr ($articulate+ ".folt[3:4]") 0.637 0.4 1 0.251 	0.14 1;
	setAttr ($articulate+ ".faml") 0.35;
	setAttr -s 3 ($articulate+ ".falt[0:2]")  0 0.039 1 1 0.60 1 0.59 	0.30 1;

	setAttr ($tumbler+".gwt") 0.1;
	setAttr ($tumbler+".csp") 0.85;
	setAttr ($tumbler+".ang") 0;

}



global proc string[] articulate.tumbler.create() {
	
	string $particle = selection.firstOfType("particle");

	string $articulate = `createNode "articulate" -n "articulate"`;
	string $tumbler = `createNode "tumbler" -n "tumbler"`;


	 articulate.tumbler.addAttrs( $particle);
//	tumbler.addAttrs( $particle);	
	
	articulate.tumbler.dynamicConnections( $particle,$articulate,$tumbler);

	
	articulate.tumbler.createCreationExpression( $particle);
	articulate.tumbler.createRuntimeBeforeExpression( $particle);
	articulate.tumbler.createRuntimeAfterExpression( $particle,$articulate,$tumbler);
	articulate.tumbler.configDefaults( $articulate,$tumbler);
	
	
	tumbler.attachDiagnostics( $particle , $tumbler);
	articulate.attachDiagnostics( $particle , $articulate);

	return {$articulate, $tumbler};
	

}