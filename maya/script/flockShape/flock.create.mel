/*

jRibPP.mel
jtools

Created by Julian Mann on 10/31/08.
Copyright (c) 2008 __MyCompanyName__. All rights reserved.
*/



// TODO at setup time, reference in the model with the LODs - 


global proc string flock.create(){


	string $psys[] = `ls -sl -dag -leaf -type "particle"`;
	if (!(`size $psys` == 1) ) error("Need exactly one particle picked");
	string $p = $psys[0];
	string $flock = `createNode "flockShape"`;
	connectAttr -f ("time1.outTime") ($flock+".currentTime");

	// connectAttr -f ($p+".particleId") ($flock+".particleId");
	connectAttr -f ($p+".sortedId") ($flock+".sortedId");
	connectAttr -f ($p+".idIndex") ($flock+".idIndex");

	connectAttr -f ($p+".position") ($flock+".translatePP");

	if (`attributeQuery -exists -n $p "phi"`){
		setAttr  ($flock+".rotateType") 1;
		connectAttr ($p+".phi") ($flock+".rotatePP");
	} else if (`attributeQuery -exists -n $p "view"`) {
		setAttr  ($flock+".rotateType") 0;
		connectAttr ($p+".view") ($flock+".rotatePP");
		if (`attributeQuery -exists -n $p "up"`) {
			connectAttr ($p+".up") ($flock+".rotateUpPP");
		}
	}

	if (`attributeQuery -exists -n $p "scalePP"`){
		connectAttr ($p+".scalePP") ($flock+".scalePP") ;
	} else if (`attributeQuery -exists -n $p "radiusPP"`) {
		connectAttr ($p+".radiusPP") ($flock+".scalePP") ;
	}
	string $particleParent = firstParentOf($p);
	connectAttr ($particleParent+".boundingBox") ($flock+".pointsBB") ;
	return $flock;
}

global proc string[] flock.addMeshes(){
	string $flockShape = selection.firstOfType("flockShape");
	string $meshes[] = `ls -sl -leaf -ni -ut -v -dag -type "mesh"`;
	string $results[];
	if (! size($meshes)) error("No Meshes");
	if (! size($flockShape)) error("No Flock");
	for ($mesh in $meshes) {

		int $fInId = attr.findNextUnconnectedIndex($flockShape+".inMeshes");
		int $fOutId = attr.findNextUnconnectedIndex($flockShape+".outMeshes");
		int $fid =  max($fInId, $fOutId);
		connectAttr -f ($mesh+".outMesh") ($flockShape+".inMeshes["+$fid+"].mesh");

		string $newMesh = `createNode "mesh"`;
		connectAttr -f   ($flockShape+".outMeshes["+$fid+"]") ($newMesh + ".inMesh");
		string $parent = firstParentOf($newMesh);
		connectAttr -f   ($parent+".v") ($flockShape+".inMeshes["+$fid+"].meshActive");
		sets -e -forceElement initialShadingGroup $newMesh;
		$results[`size $results`] = $newMesh;

	}
	return $results;
}









