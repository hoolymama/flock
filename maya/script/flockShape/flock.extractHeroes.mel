
global proc string  flock.connectedReferenceNode(string $flockNode){
	// search for connected referencce - return filename of the first one we find
	string $conns[] = `listConnections -d 1 -s 0 ($flockNode+".translateTarget")`;
	for ($conn in $conns) {	
		if (`referenceQuery -inr $conn`) {
			return `referenceQuery -rfn $conn`;
		}
	}
	return "";
	
}
// AbcExport -verbose -j "-frameRange 0 1000 -uvWrite -eulerFilter -dataFormat ogawa -file /Users/julian/dev/w/flock/maya/examples/beetles/cache/alembic/beetles__dev__variLegs__008__006__start.abc";


global proc flock.extractHeroes.doit(string $flock, int $ids[], int $start, int $end){
	string $currRefNode = flock.connectedReferenceNode($flock);
	string $fn = `referenceQuery -filename $currRefNode`;  
	string $origNamespace = string.rstrip($currRefNode,2) ;
	$origNamespace += ":";
	
	string $conns[] = `listConnections -s 0 -d 1 -p 1 -c 1 -scn 1 ($flock + ".translateTarget") ($flock + ".rotateTarget") ($flock + ".scaleTarget")  ($flock + ".userMap")  ($flock + ".userVectorMap")`;
	
	//string $edits[] = `referenceQuery -editStrings $currRefNode` ;	
	//$edits = string.grep( $edits , "setAttr*");


	string $flockTF = firstParentOf($flock);
	
	// one at a time - go through IDs, import reference file, bake it
	for ($id in $ids) {
		
		setAttr ($flock + ".targetId") $id;
		string $namespace = ("agent_"+$id+"_0") ;
		
		while (`namespace -exists (":"+$namespace)`) {
			$namespace = string.increment($namespace);
		}
		string $visAttr = ($namespace+":beetle.v");

		file -r -shd "shadingNetworks" -namespace $namespace $fn;
		// find attributes that have been changed in the original reference, and apply them to the new reference
		//for ($edit in $edits) {
		//	$edit = substituteAllString($edit, $origNamespace , ($namespace+":"));
		//	catch(`evalEcho $edit`);
		//}
		// connect the reference and at the same time build up the bake command
		string $bakeCmd = ("bakeResults -simulation 1 -t \""+$start+":"+$end+"\"  -sb 1 ");	
		int $n = size($conns) ;
		string $filterCmd = "filterCurve ";
		string $disableSrc[];
		string $disableDest[];

		for ($i=0;$i<$n;$i+=2) {
			string $destConn = `substitute $origNamespace  $conns[$i+1] ($namespace+":")`;
			connectAttr -f $conns[$i] $destConn; 
			$disableSrc[`size $disableSrc`] = $conns[$i];
			$disableDest[`size $disableDest`] = $destConn;
			
			$bakeCmd += (" "+$destConn+" ");
			string $attr = attr.attrFromNodeAttr($conns[$i]);
			if ($attr == "rotateTarget") $filterCmd += ($destConn + " ");

		}	

		evalEcho $bakeCmd ;
		
		for ($i=0;$i<($n/2);$i++) {
			if (`isConnected $disableSrc[$i] $disableDest[$i]`) disconnectAttr $disableSrc[$i] $disableDest[$i];
		}
		
		evalEcho $filterCmd ;
		setAttr $visAttr 0;
	}
}


global proc flock.extractHeroes(){
	string $sel[] = `ls -sl`; 
	int $ids[] = selection.componentIndices($sel);
	if (! `size $ids`) error("No IDs");
	string $particle = attr.nodeFromNodeAttr($sel[0]);
	
	string $flocks[] = `ls -sl -dag -leaf -type  "flockShape"`;
	if (! `size $flocks`) error("No Flocks");
	int $startFrame = `playbackOptions -q -min`;
	int $endFrame = `playbackOptions -q -max`;
	
	flock.extractHeroes.doit( $flocks[0] ,  $ids,  $startFrame,  $endFrame);
}



global proc doFlockConnectFlatTargets(string $flock, int $ids[], int $dryRun) {

	if ($dryRun) {
		print("setAttr  "+$flock + ".doFlatTargets 1\n");
	} else {
		setAttr ( $flock + ".doFlatTargets") 1;
	}


	string $currRefNode = flock.connectedReferenceNode($flock);
	string $fn = `referenceQuery -filename $currRefNode`;  
	string $origNamespace = string.rstrip($currRefNode,2) ;
	$origNamespace += ":";

	string $conns[] = `listConnections -s 0 -d 1 -p 1 -c 1 -scn 1 
	($flock + ".translateTarget") 
	($flock + ".rotateTarget") 
	($flock + ".scaleTarget") 
	($flock + ".userMap")  
	($flock + ".userVectorMap")`;


	for ($id in $ids) {

		string $namespace = ("agent_"+$id+"_0") ;
		while (`namespace -exists (":"+$namespace)`) {
			$namespace = string.increment($namespace);
		}

		if ($dryRun) {
			print("file -r -shd \"shadingNetworks\" -namespace $namespace "+$fn+";\n");
		} else {
			file -r -shd "shadingNetworks" -namespace $namespace $fn;
		}

		int $n = size($conns) ;
		for ($i=0;$i<$n;$i+=2) {
			string $destConn = `substitute $origNamespace  $conns[$i+1] ($namespace+":")`;

			string $srcConn = `substitute ($flock + ".")  $conns[$i]  ($flock + ".flatTargets["+$id+"].")`;
			$srcConn = `substitute "translateTarget"  $srcConn "flatTranslateTarget"`;
			$srcConn = `substitute "rotateTarget"  $srcConn "flatRotateTarget"`;
			$srcConn = `substitute "scaleTarget"  $srcConn "flatScaleTarget"`;

			$srcConn = `substitute "userMap"  $srcConn "flatUserDoubleTarget"`;
			$srcConn = `substitute ".userTarget"  $srcConn ""`;

			$srcConn = `substitute "userVectorMap"  $srcConn "flatUserVectorTarget"`;
			$srcConn = `substitute ".userVectorTarget"  $srcConn ""`;

			if ($dryRun) {
				print ("connectAttr -f " +$srcConn +" -> "+ $destConn + ";\n"); 
			} else {
				connectAttr -f $srcConn $destConn; 
			}
		}	
	}		
}



global proc flockConnectFlatTargets(int $dryRun){

	string $flocks[] = `ls -sl -dag -leaf -type  "flockShape"`;
	if (! `size $flocks`) error("No Flocks");
	int $startFrame = `playbackOptions -q -min`;
	int $endFrame = `playbackOptions -q -max`;
	string $flock = $flocks[0];
	int $ids[] = `getAttr ($flock+".outIds")`;
	doFlockConnectFlatTargets($flock ,  $ids,  $dryRun);

}









