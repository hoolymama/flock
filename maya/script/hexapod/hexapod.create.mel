 


global proc hexapod.connectRig() {
	
	// string $rig[] = `ls -sl -type "transform"`;
	string $hexes[] = `ls -sl -type "hexapod"`;
	
	// if (!(`size $rig` || `size $hexes`)) error("select rig and hexapod");

	// string $rigChildren[] = `listRelatives -children -type "transform" $rig`;

	string $hex =  $hexes[0]; 
	// print($rigChildren) ;
	// print($hex) ;

	for ($part in {"A", "B", "C"}) {
		if (!  objExists( ("L"+ $part) )) {
			warning("Foot doesn't exist: L"+ $part);
			continue;
		};
		connectAttr -f  ("L"+ $part +".tx") ($hex+".home"+$part+"X");
		connectAttr -f  ("L"+ $part +".tz") ($hex+".home"+$part+"Z");
		connectAttr -f  ("L"+ $part +".innerRadius") ($hex+".radiusMin"+$part);
		connectAttr -f  ("L"+ $part +".outerRadius") ($hex+".radiusMax"+$part);
	}
}



global proc string hexapod.attachGlyph(string $pointsNodeAttr) {
	string $attr =  attr.attrFromNodeAttr($pointsNodeAttr);
	string $glyph = `createNode glyphShape -n ($attr+"GlyphShape")`;
	float $r = rand(1.0) ;
	float $g = rand(1.0) ;;
	float $b = rand(1.0) ;;
	setAttr ( $glyph + ".drawColor") $r $g $b   ;
	connectAttr $pointsNodeAttr  ( $glyph + ".points") ;
	setAttr ($glyph + ".pointSize") 4   ;
	return $glyph;
}

// create matrixGlyph visualizations
proc hexapod.attachDiagnostics(  string $hexapod) {
	hexapod.attachGlyph( $hexapod+".outLeftA");
	hexapod.attachGlyph( $hexapod+".outLeftB");
	hexapod.attachGlyph( $hexapod+".outLeftC");
	hexapod.attachGlyph( $hexapod+".outRightA");
	hexapod.attachGlyph( $hexapod+".outRightB");
	hexapod.attachGlyph( $hexapod+".outRightC");
}

proc hexapod.addAttrs(string $particle) {
	string $atts[] = { 
		"phi:vectorArray",
		"omega:vectorArray",
		"radiusPP:doubleArray"
	};
	attr.addAttrs( $particle,$atts);
}

global proc hexapod.dynamicConnections(string $p,string $t) {
	string $connectionPairs[] = {
		"position:position",
		"velocity:velocity",
		"phi:phi",
		"omega:omega",
		"radiusPP:scale",
		"particleId:particleId",
		"sortedId:sortedId",
		"idIndex:idIndex"
	};
	attr.connectPairs($p, $t, $connectionPairs);
	
	connectAttr -f "time1.o" ($t+".currentTime");
}

global proc hexapod.create() {
	
	string $particle = selection.firstOfType("nParticle");
	
	string $hexapod = `createNode "hexapod" -n "hexapod"`;

	hexapod.addAttrs( $particle);

	hexapod.dynamicConnections( $particle,$hexapod);

	hexapod.attachDiagnostics($hexapod);

}
