global proc updateGUI ( string $node, string $attr, string $widget ){	//GET ATTRIBUTE TYPE TO DETERMINE WIDGET TYPE	string $attr_type = `getAttr -type ($node+"."+$attr)`;	switch($attr_type)	{		case "double":			if(`floatFieldGrp -exists $widget`)			{				float $val = `getAttr ($node+"."+$attr)`;				floatFieldGrp -e -v1 $val $widget;			}			else			{				int $val = `getAttr ($node+"."+$attr)`;				intFieldGrp -e -v1 $val $widget;			}			break;		case "doubleLinear":			if(`floatFieldGrp -exists $widget`)			{				float $val = `getAttr ($node+"."+$attr)`;				floatFieldGrp -e -v1 $val $widget;			}			else			{				int $val = `getAttr ($node+"."+$attr)`;				intFieldGrp -e -v1 $val $widget;			}			break;		case "bool":			int $check = `getAttr ($node+"."+$attr)`;			checkBox -e -v $check $widget;			break;		case "float3":			float $dc[] = `getAttr ($node+"."+$attr)`;			colorSliderGrp -e -rgb $dc[0] $dc[1] $dc[2] $widget;			break;		default:			break;	}}global proc setValue( string $node, string $attr, string $widget ){	//GET ATTRIBUTE TYPE TO DETERMINE WIDGET TYPE	string $attr_type = `getAttr -type ($node+"."+$attr)`;	switch($attr_type)	{		case "double":			if(`floatFieldGrp -exists $widget`)			{				float $val = `floatFieldGrp -q -v1 $widget`;				setAttr ($node+"."+$attr) $val;			}			else			{				int $val = `intFieldGrp -q -v1 $widget`;				setAttr ($node+"."+$attr) $val;			}			break;		case "doubleLinear":			if(`floatFieldGrp -exists $widget`)			{				float $val = `floatFieldGrp -q -v1 $widget`;				setAttr ($node+"."+$attr) $val;			}			else			{				int $val = `intFieldGrp -q -v1 $widget`;				setAttr ($node+"."+$attr) $val;			}			break;		case "bool":			int $check = `checkBox -q -v $widget`;			setAttr ($node+"."+$attr) $check;			break;		case "float3":			float $dc[] = `colorSliderGrp -q -rgb $widget`;			setAttr -type double3 ($node+"."+$attr) $dc[0] $dc[1] $dc[2];			break;		default:			break;	}}global proc priorityGUI(){	//GET PRIORITIZE NODES	string $pNode;	string $selection[] = `ls -sl`;	if(`nodeType $selection[0]` != "prioritize")	{		string $results[] = `listRelatives -ad -type prioritize $selection`;		$pNode = $results[0];	}	else	{		$pNode = $selection[0];	}	//GET PRIORITY CONNECTIONS	string $pCons[] = `listConnections -s 1 -d 0 ($pNode+".inputData")`;	int $num = size($pCons);		//GET ACTIVE STATE OF EACH CONNECTION FROM THE PRIORITY NODE	//NEED TO GET INDEX TO PRIORITY NODE, THEN GET ACTIVE VALUE	int $activeStates[];	string $typeList[], $activeAttrs[];	clear $activeStates $typeList $activeAttrs;	for($i=0;$i<$num;$i++)	{		string $cons[];		string $type = `nodeType $pCons[$i]`;		if(`gmatch $type "*ield"`)		{			$type = "field";		}		$typeList[$i] = $type;			switch($type)		{			case "field":				$cons = `listConnections -s 0 -d 1 -p 1 -type prioritize ($pCons[$i]+".outputForce[0]")`;				break;			case "multPP":				$cons = `listConnections -s 0 -d 1  -p 1 -type prioritize ($pCons[$i]+".outputV")`;				break;			default:	//sensor				$cons = `listConnections -s 0 -d 1 -p 1 -type prioritize ($pCons[$i]+".assessment")`;				break;		}		string $parts[];		tokenize($cons[0], "[", $parts);		tokenize($parts[1], "]", $parts);		$activeAttrs[$i] = ("inputData["+$parts[0]+"].active");		$activeStates[$i] = `getAttr ($pNode+".inputData["+$parts[0]+"].active")`;	}		//CREATE GUI	int $sid[];	string $window = `window -title ($pNode+" GUI")`;	columnLayout -adj true;		rowLayout -numberOfColumns 3			-columnWidth3 200 300 300;			text -label ("     "+$pNode) -align "right" -font "boldLabelFont";			int $maxValue = `getAttr ($pNode+".maxSignal")`;			intFieldGrp -label "Max Signal" -v1 $maxValue -cc ("setValue "+$pNode+" maxSignal "+$pNode+"_maxSignalINT") ($pNode+"_maxSignalINT");			$sid[size($sid)] = `scriptJob -ac ($pNode+".maxSignal") ("updateGUI "+$pNode+" maxSignal "+$pNode+"_maxSignalINT")`;			button -w 200 -h 30 -label "                       Select" -align "center" -c ("select -r "+$pNode) selectPNodeBTN;			setParent ..;	string $form = `formLayout -nd 100`;			//CREATE FRAME LAYOUTS FOR EACH CONNECTION	string $frameLayouts[], $checkBoxes[];	clear $frameLayouts $checkBoxes;	for($i=0;$i<$num;$i++)	{		$frameLayouts[$i] = `frameLayout -label $pCons[$i] ($pCons[$i]+"FRM")`;		columnLayout -adj true ($pCons[$i]+"CLM");		$checkBoxes[$i] = `checkBox -label "Active:" -align "left" -v $activeStates[$i] -cc ("setValue "+$pNode+" "+$activeAttrs[$i]+" "+$pCons[$i]+"ActiveCHK") ($pCons[$i]+"ActiveCHK")`;		$sid[size($sid)] = `scriptJob -ac ($pNode+"."+$activeAttrs[$i]) ("updateGUI "+$pNode+" "+$activeAttrs[$i]+" "+$pCons[$i]+"ActiveCHK")`;				//GET DRAW COLOR		string $cons[] = `listConnections -s 0 -d 1 -p 1 -type prioritize $pCons[$i]`;		string $parts[];		tokenize($cons[0], "[", $parts);		tokenize($parts[1], "]", $parts);		int $index = $parts[0];		float $rgb[] = `getAttr ($pNode+".inputData["+$index+"].drawColor")`;		colorSliderGrp -cw2 110 110 -rgb $rgb[0] $rgb[1] $rgb[2] 						-cc ("setValue "+$pNode+" "+("inputData["+$index+"].drawColor")+" "+$pCons[$i]+"CLR") ($pCons[$i]+"CLR");								$sid[size($sid)] = `scriptJob -ac ($pNode+".inputData["+$index+"].drawColor") ("updateGUI "+$pNode+" "+("inputData["+$index+"].drawColor")+" "+$pCons[$i]+"CLR")`;		//CREATE SELECTION BUTTON		button -label "Select" -h 30 -c ("select -r "+$pCons[$i]) ($pCons[$i]+"SelectBTN");			//GET ATTRIBUTES FOR EACH CONNECTION		string $attrs[];		clear $attrs;		switch($typeList[$i])		{			case "field":				$attrs = {"magnitude", "attenuation", "useMaxDistance", "maxDistance"};				break;			case "multPP":				$attrs = `listAttr -k $pCons[$i]`;				break;			default:				$attrs = `listAttr -k $pCons[$i]`;				break;		}			//CREATE WIDGETS FOR EACH ATTRIBUTE		string $widget;		for($attr in  $attrs)		{			string $attr_type = `getAttr -type ($pCons[$i]+"."+$attr)`;			switch($attr_type)			{				case "double":					float $val = `getAttr ($pCons[$i]+"."+$attr)`;					$widget = ($pCons[$i]+"_"+$attr+"FLT");					//CHECK IF ATTRIBUTE HAS INCOMING CONNECTIONS...IF SO, DISABLE					if(`connectionInfo -isDestination ($pCons[$i]+"."+$attr)`)					{						floatFieldGrp -numberOfFields 1 -label $attr -v1 $val -en 0 -cc ("setValue "+$pCons[$i]+" "+$attr+" "+$widget) $widget;						$sid[size($sid)] = `scriptJob -ac ($pCons[$i]+"."+$attr) ("updateGUI "+$pCons[$i]+" "+$attr+" "+$widget)`;					}					else					{						floatFieldGrp -numberOfFields 1 -label $attr -v1 $val -cc ("setValue "+$pCons[$i]+" "+$attr+" "+$widget) $widget;						$sid[size($sid)] = `scriptJob -ac ($pCons[$i]+"."+$attr) ("updateGUI "+$pCons[$i]+" "+$attr+" "+$widget)`;					}					break;				case "doubleLinear":					$val = `getAttr ($pCons[$i]+"."+$attr)`;					$widget = ($pCons[$i]+"_"+$attr+"FLT");					//CHECK IF ATTRIBUTE HAS INCOMING CONNECTIONS...IF SO, DISABLE					if(`connectionInfo -isDestination ($pCons[$i]+"."+$attr)`)					{						floatFieldGrp -numberOfFields 1 -label $attr -v1 $val -en 0 -cc ("setValue "+$pCons[$i]+" "+$attr+" "+$widget) $widget;						$sid[size($sid)] = `scriptJob -ac ($pCons[$i]+"."+$attr) ("updateGUI "+$pCons[$i]+" "+$attr+" "+$widget)`;					}					else					{						floatFieldGrp -numberOfFields 1 -label $attr -v1 $val -cc ("setValue "+$pCons[$i]+" "+$attr+" "+$widget) $widget;						$sid[size($sid)] = `scriptJob -ac ($pCons[$i]+"."+$attr) ("updateGUI "+$pCons[$i]+" "+$attr+" "+$widget)`;					}					break;				case "bool":					int $check = `getAttr ($pCons[$i]+"."+$attr)`;					$widget = ($pCons[$i]+"_"+$attr+"CHK");					checkBox -label $attr -align "left" -v $check -cc ("setValue "+$pCons[$i]+" "+$attr+" "+$widget) $widget;					$sid[size($sid)] = `scriptJob -ac ($pCons[$i]+"."+$attr) ("updateGUI "+$pCons[$i]+" "+$attr+" "+$widget)`;					break;				default:					break;			}		}			setParent $form;	}		string $cmd = "formLayout -edit";	float $inc = 100.0/$num;	for($i=0;$i<$num;$i++)	{		int $div = ceil(($i+1)*$inc);		$cmd += (" -attachForm "+$frameLayouts[$i]+" \"top\" 5\n");		if($i==0)		{			$cmd += (" -attachForm "+$frameLayouts[$i]+" \"left\" 5\n");		}		else		{			$cmd += (" -attachControl "+$frameLayouts[$i]+" \"left\" 5 "+$frameLayouts[$i-1]+"\n");		}		$cmd += (" -attachForm "+$frameLayouts[$i]+" \"bottom\" 5\n");		$cmd += (" -attachPosition "+$frameLayouts[$i]+" \"right\" 5 "+$div+"\n\n");	}	$cmd += (" "+$form);	eval $cmd;	showWindow $window;		for($id in $sid)	{		scriptJob -uid $window ("scriptJob -kill "+$id+" -force");	}}