
// global proc dummiesToRefs(){




// 	string $timestamp = `date -f DD_MM_YY_hhmm`;


// 	string $dummies[] = `ls -sl`; 
// 	for ($dummy in $dummies) {

// 	}

// 	string $colony = $colonies[0]; 

// 	string $beetleRoots[] =  `listRelatives -fullPath -c $colonies[0]` ;


// 	string $ws = `workspace -q -rd`;
// 	string $alembicDir = ($ws+"/export_"+$timestamp+"/cache/alembic");
// 	string $scenesDir = ($ws+"/export_"+$timestamp+"/scenes");
// 	string $moviesDir = ($ws+"/export_"+$timestamp+"/movies");

// 	sysFile -md $alembicDir;
// 	sysFile -md $scenesDir;
// 	sysFile -md $moviesDir;

// 	string $refFilename = ($scenesDir+"/beetleRef_"+$timestamp+".ma");

// 	exportReference($beetleRoots[0], $refFilename);

// 	int $i = 0;
// 	for ($beetle in $beetleRoots) {
// 		string $ref = replaceWithReference($beetle, $refFilename, $i);
// 		$i++;
// 	}
// 	delete  $colony ;


// 	string $sceneName = ($scenesDir +"/ beetleColony_"+$timestamp);
// 	file -rename $sceneName;
//  	file -f -save -type "mayaAscii";

// 	string $abcNodes[] = `ls -type "AlembicNode"`;
// 	string $cachePath = `getAttr ($abcNodes[0]+".abc_File")`;
// 	string $cacheName = string.lastToken( $cachePath, "/");
// 	string $newCachePath = ( $alembicDir+"/"+ $cacheName);
// 	sysFile -copy $newCachePath $cachePath;      

// }


/*
	
	To prepare the scene for Jake

	




	*/

/*
vector $asns = <<nParticleShape1.antennaStemMinScaleX, nParticleShape1.antennaStemMinScaleY, nParticleShape1.antennaStemMinScaleZ>>;
vector $asxs = <<nParticleShape1.antennaStemMaxScaleX, nParticleShape1.antennaStemMaxScaleY, nParticleShape1.antennaStemMaxScaleZ>>;
vector $abns = <<nParticleShape1.antennaBrushMinScaleX, nParticleShape1.antennaBrushMinScaleY, nParticleShape1.antennaBrushMinScaleZ>>;
vector $abxs = <<nParticleShape1.antennaBrushMaxScaleX, nParticleShape1.antennaBrushMaxScaleY, nParticleShape1.antennaBrushMaxScaleZ>>;

antennaStemScale = rand($asns, $asxs);
antennaBrushScale = rand($abns, $abxs);
*/
//float $asms[] = nParticleShape1.antennaStemMinScaleX;
//float $asxs[] = nParticleShape1.antennaStemMaxScale;
//float $abms[] = nParticleShape1.antennaBrushMinScale;
//float $abxs[] = nParticleShape1.antennaBrushMaxScale;
 // rand(nParticleShape1.antennaStemMinScale, nParticleShape1.antennaStemMaxScale);


	global proc alembicStashBlendFrame(int $frame ) {
	
		if ($frame == 100) {
			string $dummies[] = `listRelatives -c "*:dummies"`;
			for ($d in  $dummies) { 
				string $conns[] = `listConnections -s 1 -d 0  ($d+".rotate")`;
				float $vals[]  = `getAttr ($conns[0] + ".inRotate1")`;
				setAttr ($conns[0] + ".inRotate2") $vals[0] $vals[1] $vals[2];
				$vals  = `getAttr ($conns[0] + ".inTranslate1")`;
				setAttr ($conns[0] + ".inTranslate2") $vals[0] $vals[1] $vals[2];
			}
		 
		}

	}
	



	global proc packageBeetleScene( ){
		
		string $timestamp = `date -f DD_MM_YY_hhmm`;
		string $ws = `workspace -q -rd`;
		string $alembicDir = ($ws+"/export_"+$timestamp+"/cache/alembic");
		string $scenesDir = ($ws+"/export_"+$timestamp+"/scenes");
		
		sysFile -md $alembicDir;
		sysFile -md $scenesDir;

		string $sceneFile = ($scenesDir +"/ beetleColony_"+$timestamp);

		file -rename $sceneFile;
		file -f -save -type "mayaAscii";

		string $refFile = `referenceQuery -filename beetleRef_00RN` ;
		string $refName = string.lastToken( $refFile, "/");


		sysFile -copy ($scenesDir+"/"+$refName) $refFile;  


		string $abcNodes[] = `ls -type "AlembicNode"`;
		string $cachePath = `getAttr ($abcNodes[0]+".abc_File")`;
		string $cacheName = string.lastToken( $cachePath, "/");
		sysFile -copy ( $alembicDir+"/"+$cacheName) $cachePath;  

	}



	global proc stripBeetleRig(){
		string $bendys[] = `ls -type "bendyBones"`;
		string $inputs[] = `listConnections -s 1 -d 0 $bendys`;
		$inputs = `ls -type "joint" $inputs`;
		delete $inputs;
		delete `ls -type animCurve`;
		delete `ls -type bendyBones`;
		delete `ls -type choice`;
		delete "poleVector*";
		delete "ikHandle*";
		delete "dummies";
		delete "ellipsoid";
		string $atts[] = `listAttr -ud beetle`;
		for ($att in $atts) {
			deleteAttr ("beetle."+$att);
			 catchQuiet ( `deleteAttr ("beetle."+$att)` );
		}
	}

	proc string importCacheNode(){
		string $startDir = (`workspace -q -rd` + "/cache/alembic");
		string $filter = "Alembic Files (*.abc)";
		string $tmp[] = `fileDialog2 -cap "Browse for alembic cache" -fm 1 -startingDirectory $startDir  -fileFilter $filter -dialogStyle 2`;
		if (! `size $tmp`) error ("You must select one alembic cache");
		string $res = `AbcImport -mode import $tmp[0]`;
		return $res;
	}

	proc string getReferenceFile(){
		string $startDir = (`workspace -q -rd` + "/scenes/references");
		string $filter = "Maya Files (*.ma *.mb);;Maya ASCII (*.ma);;Maya Binary (*.mb)";
		string $tmp[]  = `fileDialog2 -cap "Browse for reference" -fm 1 -startingDirectory $startDir  -fileFilter $filter -dialogStyle 2`;
		if (! `size $tmp`) error ("You must select one stripped reference file");
		return $tmp[0];
	}

	proc string  equivalentJointPlug(string $nodeAttr ,string  $joint) {
		string $destAttr =  plugAttr($nodeAttr );
		return ($joint + "." + $destAttr);
	}


	proc string equivalentNodeInNamespace(string $node, string $namespace) {
		string $tokens[] = string.tokenize($node, "|");
		int $nt = `size $tokens`;
		for  ($i = 0; $i<$nt;$i++) {
			$tokens[$i] =  ($namespace+":"+$tokens[$i]);
		} 	
		return string.join($tokens, "|");
	}

 



	proc reconnectJoint(string $node, string $namespace) {
		
		string $jointOrig = `getAttr ($node+".sourceNode")`;
		string $joint = equivalentNodeInNamespace($jointOrig, $namespace);

		string $conns[] = `listConnections -s 1 -d 0 -p 1 -c 1 $node`;
		int $n = size($conns) ;
		for ($i=0;$i<$n;$i+=2) {
			string $destConn =  equivalentJointPlug($conns[$i], $joint);
			string $srcConn = $conns[($i+1)];
			connectAttr -f $srcConn $destConn; 
		}	

		string $shortName = string.lastToken($jointOrig, "|");
		// print ("$shortName  "+ $shortName +"\n");
		string $scaledTransforms[] = { "joint38",   "joint39",  "joint40",  "joint42",  "joint43",  "joint44",  "beetleRoot"};
		for ($tf in $scaledTransforms) {
			if ($tf == $shortName) {
				// print ($tf " == " $shortName+"\n");
				float $scale[] = `getAttr ($node+".scale")`;
				setAttr ($joint+".scale")  $scale[0]  $scale[1]  $scale[2];
				break;
			}
		}
	}

	global proc attachBeetleToDummy(string $referenceFile,  string $dummy, int $i) {

		string $index = string.padNumber($i, 2);
		string $namespace = ("beetleRef_"+$index);
		file -r  -namespace $namespace $referenceFile;



		string $nodes[] = `listRelatives   -f -c $dummy`;
		for ($node in $nodes) {
			reconnectJoint($node, $namespace);
		}
		delete $dummy;


	}

	global proc dummiesToRefs(){
		string $referenceFile = getReferenceFile();
		string $cacheNode = importCacheNode();

		string $dummies[] = `ls "dummies*"`;
		int $i = 0;
		for ($dummy in $dummies) {
			attachBeetleToDummy($referenceFile, $dummy, $i);
			$i++;
		}
	}
